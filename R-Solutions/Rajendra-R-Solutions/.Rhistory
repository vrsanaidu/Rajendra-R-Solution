x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
pie(x,labels)
library(plotrix)
# Create data for the graph.
x <-  c(21, 62, 10,53)
lbl <-  c("London","New York","Singapore","Mumbai")
# Give the chart file a name.
png(file = "datafiles/3d_pie_chart.jpg")
pie3D(x,labels = lbl,explode = 0.01, main = "Pie Chart of Countries ")
print("hello world")
print(1:20)
mean(1:10)
mean(xmean)
xmean <- 1:100
mean(xmean)
help(mean) #search exact term 
example(mean) 
?mean 
help.search("rnorm") 
help.search("mean") 
??rnorm 
demo() 
demo(package = .packages(all.available = TRUE)) 
demo(package = 'graphics') 
demo(graphics) 
vignette() #List all vignettes in attached packages
scr <- 300 #Using assignment operator
scr <- 300 
scr 
factorexample <- c(1,2,3,4,5,6)
factorexample
str(factorexample)
factorexample <- c(1,2,3,4,5,6,"Rajendra")
str(factorexample)
10 + 5  #Addition
10 - 5  #Subtraction
10 * 5  #Multiplication
10 / 5  #Division
10 ^ 5  #Exponentiation
2 ^ 5  #Exponentiation
format(10 ^ 5, scientific=FALSE) #Without scientific notation
10 ** 5 #Exponentiation
10 %% 3  #Modulus 
10 %/% 3  #Integer division
10/3
str(10/3)
str(10 %/% 3) #Integer division
abs(-5)  #Absolute 
log(2) #Natural logarithm
log
log(2,base = 10 ) #Logarithm
exp(5) #Exponential
factorial(5) #factorial
pi #PI
options() #Get global options
NA + 5 #Operation on NA
NA + 5 #Operation on NA
is.na(NA) #Check if NA
is.na(NaN) #Check if NaN is NA
is.nan(NA) #Check if NA is NaN
5 > 2  
5 >= 2 
5 < 2  
5 <=2  
5 == 2 
5 != 2 
5 == 2 
5 != 2 
"b" > "a" 
!(TRUE) 
TRUE | FALSE 
TRUE & FALSE 
marks <- c(10, 20, 30, 40)
marks 
marks[0]
marks[[0]]
marks 
marks 
marks[1] 
mean(marks)
marks <- marks + 5 
marks
marks >= 30 
pmarks <- c(20,40,30,50) cmarks <- c(30,20,50,20) totmarks <- pmarks + cmarks 
totmarks 
snames <- c("Raj","Rahul","Priya","Poonam")
snames 
str(snames) 
is.character(snames) 
student.weights <- c( 60.5, 72.5 , 45.2,  47.5) 
str(student.weights) 
s.weights <- c( 60.5, 72.5 , 45.2,  47.5) 
str(s.weights) 
is.numeric(s.weights) 
spmarks <- c( 70L , 75L , 80L,  85L) 
str(spmarks) 
is.integer(spmarks) 
is.numeric(spmarks)  is.integer(s.weights) 
spinterest <- c(FALSE,F,TRUE ,T)  str(spinterest)  is.logical(spinterest) 
10+2i
complex.vector <- c(10+2i, -1+10i, 4+3i, 7+8i) 
complex.vector 
str(complex.vector) 
is.complex(complex.vector) 
vector("character", length = 4)  vector("numeric", length = 4)   vector("integer", length = 4)   vector("logical", length = 4)   vector("complex", length = 4)  
sp.marks <- c( 70L , 75L , 80L,  85L)
str(sp.marks)
scmarks <- c(60L, 70L, 85L, 70L)
sp.marks + scmarks #arithmetic operation
sp.marks >= 75 #logical operation
snames <- c("Raj","Rahul","Priya","Poonam")
snames[1] #1 based index, use [] to access elements
snames[2] #Extract second element
snames[1:3] #Extract multiple elements
snames[c(T,F,T,F)] #Extract multiple elements by specifying a logical vector
snames[sp.marks >= 75]
sweights <- c( 60.5, 72.5 , 45.2,  "47.5")
str(sweights)
as.numeric(sp.marks >= 75)
as.character(sp.marks) 
sweights <- c( 60.5, 72.5 , 45.2,  47.5) 
as.integer(sweights)
as.numeric(snames) 
as.numeric(snames) 
genders <- c("Male","Male","Female","Female") # Character vector
genders
genders <- c(2L,2L,1L,1L) # Integer vector
genders
genders <- factor(c("Male","Male","Female","Female")) # factor
genders
as.numeric(genders) #Explicit conversion
genders
genders <- c(4L,2L,1L,1L) # Integer vector
genders
genders <- factor(c("Male","Male","Female","Female")) # factor
genders
as.numeric(genders) #Explicit conversion
str(bloodgroups)
bloodgroups <- factor(c("A","AB","O","AB"), levels = c("A","B","AB","O")) 
str(bloodgroups)
names <- c("Raj","Rahul","Priya","Poonam")
weights <- c( 60.5, 72.5 , 45.2,  47.5)
genders <- factor(c("Male","Male","Female","Female"))
pmarks <- c( 70L , 75L , 80L,  85L)
cmarks <- c(60L, 70L, 85L, 70L)
student1 <- list(names[1], weights[1], genders[1],                   pmarks[1], cmarks[1])
str(student1)
student1
list(names, weights[1], genders[1],                  pmarks[1], cmarks[1])
list(names, weights[1], genders[1],                  pmarks[1], cmarks[1])
snames <- c("Raj","Rahul","Priya","Poonam") sweights <- c( 60.5, 72.5 , 45.2,  47.5) sgenders <- factor(c("Male","Male","Female","Female")) spmarks <- c( 70L , 75L , 80L,  85L) sc.marks <- c(60L, 70L, 85L, 70L)
student1 <- list(snames[1], sweights[1], sgenders[1],                  spmarks[1], sc.marks[1])
student1[1] #Single brackets [] return element of same type
typeof(student1[1]) 
student1[[1]] #double brackets [[]] return the object in its own type
typeof(student1[[1]]) 
student1[1:3] #Access multiple elements using index
#Subsetting: Extract element(s) using named list student1 <- list(name = snames[1],                   weight = sweights[1],                   gender = sgenders[1],                   physics = spmarks[1],                  chemistry = sc.marks[1]) student1[["name"]] student1$gender #Access element using element name or label student1[c("physics","chemistry")] #Access multiple elements using label names #Use length() to get number of elements length(student1)
snames <- c("Raj","Rahul","Priya","Poonam") sweights <- c( 60.5, 72.5 , 45.2,  47.5) sgenders <- factor(c("Male","Male","Female","Female")) spmarks <- c( 70L , 75L , 80L,  85L) scmarks <- c(60L, 70L, 85L, 70L)
students <- data.frame(snames,sweights,sgenders,                        spmarks, scmarks)
typeof(students)
str(students)
students
students
students <- data.frame(snames,sweights,sgenders,                        spmarks, scmarks,                         stringsAsFactors = FALSE)
str(students)
gnames <- data.frame("Rajendra")
gnames
gnames <- data.frame("Rajendra","Simhadri","Naidu")
gnames
str(gnames)
gnames <- data.frame("Rajendra","Simhadri","Naidu",stringsAsFactors = FALSE)
str(gnames)
typeof(students[1])  
student.names <- c("Raj","Rahul","Priya","Poonam") student.weights <- c( 60.5, 72.5 , 45.2,  47.5) student.genders <- factor(c("Male","Male","Female","Female")) student.physics.marks <- c( 70L , 75L , 80L,  85L) student.chemistry.marks <- c(60L, 70L, 85L, 70L) students <- data.frame(student.names,student.weights,student.genders,         student.physics.marks, student.chemistry.marks, stringsAsFactors = FALSE)
typeof(students[1])  
spmarks <- c( 70L , 75L , 80L,  85L)
scmarks <- c(60L, 70L, 85L, 70L)
smarks <-rbind(spmarks , scmarks)
smarks
smarks <-cbind(spmarks , scmarks)
smarks
rownames(smarks) <- c("Raj","Rahul","Priya","Poonam")
smarks
str(smarks)
smarks <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=2,nrow=4) smarks
smarks <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=4,nrow=2                         ,byrow=TRUE) smarks
smarks <- matrix(c(70L, 75L, 80L, 85L, 60L, 70L, 85L, 70L), ncol = 4, nrow = 2, byrow = FALSE) smarks
c1.spmarks <- c( 70L , 75L , 80L,  85L) c1.scmarks <- c(60L, 70L, 85L, 70L)
c1.spmarks <- c( 70L , 75L , 80L,  85L) c1.scmarks <- c(60L, 70L, 85L, 70L) c1.smarks <-cbind(c1.spmarks , c1.scmarks) c1.smarks
class2.spmarks <- c( 71L , 76L , 81L,  86L) class2.scmarks <- c(61L, 71L, 86L, 71L) class2.smarks <-cbind(class2.spmarks                               , class2.scmarks)
rclass2.smarks <-rbind(class2.spmarks                               , class2.scmarks)
rclass2.smarks
smarks <- array(c(c1.smarks,class2.smarks), dim=c(4,2,2))
smarks
c1.spmarks <- c( 70L , 75L , 80L,  85L) c1.scmarks <- c(60L, 70L, 85L, 70L) c1.smarks <-cbind(c1.spmarks , c1.scmarks) c1.smarks
c2.spmarks <- c( 71L , 76L , 81L,  86L) c2.scmarks <- c(61L, 71L, 86L, 71L) c2.smarks <-cbind(c2.spmarks                               , c2.scmarks)
c2.spmarks <- c( 71L , 76L , 81L,  86L) c2.scmarks <- c(61L, 71L, 86L, 71L) c2.smarks <-cbind(c2.spmarks                               , c2.scmarks)
rc2.smarks <-rbind(c2.spmarks                               , c2.scmarks)
c2.smarks rc2.smarks
c1.smarks c2.smarks
smarks <- array(c(c1.smarks,c2.smarks), dim=c(4,2,2)) smarks
my.array <- array(1:24, dim = c(3, 4, 2)) my.array
GetTotalMarks <- function(quiz.marks, viva.marks) {   total.marks <- quiz.marks + viva.marks   #total.marks } spq.marks <- c(70L, 75L, 80L, 85L) spv.marks <- c(7L, 5L, 8L, 6L) spt.marks <- GetTotalMarks(spq.marks,                                              spv.marks) spt.marks scq.marks <- c(60L, 70L, 85L, 70L) scv.marks <- c(8L, 4L, 7L, 9L) sct.marks <- GetTotalMarks(scq.marks,                                                scv.marks) sct.marks returnMyfullname <- function(name) {   cat(name,"Simhadri Appala Naidu", "Vechalapu")   length(name) } str(returnMyfullname) returnMyfullname('Rajendra')
sample(1:10)
sample(1:10, size = 5)
sample(c(0, 1), 10, replace = TRUE)
dnorm(0)
dnorm(0, mean = 3, sd = 5)
curve(dnorm, -3, 3)
pnorm(1.5)
data(mtcars)
mtcars
str(data(mtcars))
class(data(mtcars))
str(mtcars)
range(mtcars.mpg)
range(mtcars$mpg)
length(mtcars)
length(mtcars$mpg)
mean(mtcars$mpg)
median(mtcars$mpg)
var(mtcars$mpg) sd(mtcars$mpg)
IQR(mtcars$mpg)
quantile(mtcars$mpg,0.67)
max(mtcars$mpg, 0.67) min(mtcars$mpg, 0.67)
max(mtcars$mpg) min(mtcars$mpg)
summary(mtcars)
table(mtcars$cyl)
library(ggplot2)
ip <- function(packagename){   # Verify the package is installed.   is_installed <- any(grepl(packagename,installed.packages()))   if(!is_installed){     install.packages(packagename)     print("Installed package")   }   else   {     print("package already installed")   } }
ip(ggplot2)
ip("ggplot2")
library(ggplot2)
library(ggplot2)
getwd()
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
?qplot
?qplot
mtcars
?binwidth
qplot(mtcars$mpg, binwidth = 2)
qplot(mtcars$mpg, binwidth = 20)
qplot(mtcars$mpg, binwidth = 2)
qplot(mtcars$gear, binwidth = 2)
qplot(mtcars$gear, binwidth = 1)
qplot(mtcars$mpg, binwidth = 2)
1+2
qplot(mtcars$mpg, binwidth = 2)
x = c(1, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6)
mode(x)
mode(x)
x = c(1, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6) mode(x)
mode(x)
mode(x,1)
mode(x,1)
data(mtcars)
mtcars[1:3]
cov(mtcars[1:3])
cor(mtcars[1:3])
library(reshape2)
?reshape2
library(reshape2)
reshape2
?melt
qplot(x = Var1, y = Var2, data = melt(cor(mtcars[1:3])), fill = value, geom = "tile")
name = c("p4@HPS1", "p7@HPS2", "p4@HPS3", "p7@HPS4", "p7@HPS5", "p9@HPS6", "p11@HPS7", "p10@HPS8", "p15@HPS9") expression = c(118.84, 90.04, 106.6, 104.99, 93.2, 66.84, 90.02, 108.03, 111.83) dataset <- as.data.frame(cbind(name, expression)) nam <- c("HPS5", "HPS6", "HPS9", "HPS2")
name
expres
expression
dataset
nam
dataset[grep(paste(nam, collapse = "|"), dataset$name),]
df <- data.frame("Dependent" = c(0, 1, 2, 0, 1, 2, 3, 4),                  "Counts" = c(2, 4, 1, 11, 5, 3, 2, 1),                  "Indication" = c("Stay", "Stay", "Stay", "Left", "Left", "Left", "Left", "Left"))
library(tidyr)
install.packages("tidyr")
library(tidyr)
?tidyr
??tidyr
library(tidyr)
library(tidyr)
library(tidyr)
library(dplyr)
library(dplyr)
head(mtcars)
mtcars$car <- rownames(mtcars)
mtcars
head(mtcars)
mtcars <- mtcars[, c(12, 1:11)]
mtcars
  b = c(56, 90, 50))
messy <- data.frame(   name = c("Wilbur", "Petunia", "Gregory"),   a = c(67, 80, 64),   b = c(56, 90, 50))
messy
messy %>%   gather(drug, heartrate, a:b)
tidyr     gather()     spread()     separate()     unite()
messy
nodata <- data.frame(x = numeric(0), y = integer(0), z = character(0)) str(nodata)
nodata
Died.At <- c(22, 40, 72, 41)
Writer.At <- c(16, 18, 36, 36)
First.Name <- c("John", "Edgar", "Walt", "Jane")
Second.Name <- c("Doe", "Poe", "Whitman", "Austen")
Sex <- c("MALE", "MALE", "MALE", "FEMALE")
Date.Of.Death <- c("2015-05-10", "1849-10-07", "1892-03-26", "1817-07-18") # - Read more at:http: / / scl.io / KBYDSxie #gs.bdRU99Y
writers_df <- data.frame(Died.At, Writer.At, First.Name, Second.Name, Sex, Date.Of.Death) # Read more at:http: / / scl.io / KBYDSxie #gs.bdRU99Y
writers_df
nrow(writers_df)
ncol(writers_df) 
group
rnorm(12,mean=20,sd=3)
rnorm(12,mean=20)
rnorm(12)
rnorm(12,mean=20,sd=10)
as.integer(rnorm(12,mean=20,sd=10))
Qtr.1 <- c(as.integer(rnorm(12, mean = 20, sd = 10)))
Qtr.1
group <- c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3) year <- c(2006, 2007, 2008, 2009, 2006, 2007, 2008, 2009, 2006, 2007, 2008, 2009) #as.integer(rnorm(12,mean=20,sd=10)) Qtr.1 <- c(as.integer(rnorm(12, mean = 20, sd = 3))) Qtr.2 <- c(as.integer(rnorm(12, mean = 20, sd = 2))) Qtr.3 <- c(as.integer(rnorm(12, mean = 20, sd = 4))) Qtr.4 <- c(as.integer(rnorm(12, mean = 20, sd = 5))) long_df <- data.frame(group,year, Qtr.1, Qtr.2, Qtr.3, Qtr.4)
long_df
long_DF <- long_df %>% gather(Quarter, Revenue, Qtr.1:Qtr.4)
long_df
long_DF 
group <- c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3) year <- c(2006, 2007, 2008, 2009, 2006, 2007, 2008, 2009, 2006, 2007, 2008, 2009) #as.integer(rnorm(12,mean=20,sd=10)) Qtr.1 <- c(as.integer(rnorm(12, mean = 20, sd = 3))) Qtr.2 <- c(as.integer(rnorm(12, mean = 20, sd = 2))) Qtr.3 <- c(as.integer(rnorm(12, mean = 20, sd = 4))) Qtr.4 <- c(as.integer(rnorm(12, mean = 20, sd = 5))) long_df <- data.frame(group, year, Qtr.1, Qtr.2, Qtr.3, Qtr.4)
long_df
long_df %>% gather(Quarter, Revenue, - Group, - Year)
long_df %>% gather(Quarter, Revenue, - Group, - Year)
long_df %>% gather(Quarter, Revenue, - group, - year)
long_df %>% gather(Quarter, Revenue, Qtr.1, Qtr.2, Qtr.3, Qtr.4)
qplot(x = Var1, y = Var2, data = melt(cor(mtcars[1:3])), fill = value, geom = "tile")
qplot(x = Var1, y = Var2, data = melt(cor(mtcars[1:3])), fill = value, geom = "tile")
mtcars
lmfit = lm(mtcars$mpg ~ mtcars$cyl) # to fit into linear model
str(lmfit)
?lm
lmfit
summary(lmfit)
?anova
anova(lmfit) # to analysis, use anova function
anova(lmfit) # to analysis, use anova function
plot(mtcars$cyl, mtcars$mpg)
abline(lmfit)
binom.test(x = 92, n = 315, p = 1 / 6)
mtcars
?mtcars
?mtcars
?mtcars
?mtcars
?mtcars
boxplot(mtcars$mpg, mtcars$mpg[mtcars$am == 0], ylab = "mpg", names = c("overall", "automobile"))
abline(h = mean(mtcars$mpg), lwd = 2, col = "red")
abline(h = mean(mtcars$mpg[mtcars$am == 0]), lwd = 2, col = "blue")
mpg.mu = mean(mtcars$mpg)
mpg.mu = mean(mtcars$mpg)
mpg_am = mtcars$mpg[mtcars$am == 0]
mpg_am = mtcars$mpg[mtcars$am == 0]
mean(mpg_am)
t.test(mpg_am, mu = mpg.mu)
boxplot(mtcars$mpg ~ mtcars$am, ylab = 'mpg', names = c('automatic', 'manual')) abline(h = mean(mtcars$mpg[mtcars$am == 0]), lwd = 2, col = "blue") abline(h = mean(mtcars$mpg[mtcars$am == 1]), lwd = 2, col = "red")
t.test(mtcars$mpg ~ mtcars$am)
Lesson 3
======================================================== *** ### What to Do First? Notes: *** ### Pseudo-Facebook User Data Notes: ```{r Pseudo-Facebook User Data}
```
install.packages('ReporteRs')
require(ggplot2)
doc = docx(title = 'My document')
install.packages('docxtractr')
require(ggplot2)
doc = docx(title = 'My document')
x <- 1:5
x
8 + 5 
1:250
print("Hello World!")
x <- 1:5
type(x)
typeof(x)
class(x)
x
y <- c(6, 7, 8, 9, 10) 
y
x <- a:d
y1 <- c(1,a,4,5)
y1 <- c(1,'a',4,5)
y1
x <- 'a':'d''
x <- 'a':'d'
y1 <- c(1,'a',4,5,y)
y1
y1
a <- 1 
2 -> a 
a <- b <- c <- 3 
x
y
x + y 
x * 2 
browseURL("http://google-styleguide.googlecode.com/svn/trunk/Rguide.xml")
rm(x) # Remove an object from workspace
rm(a, b) # Remove more than one
rm(list = ls())
browseURL("http://cran.r-project.org/web/views/")
browseURL("http://cran.stat.ucla.edu/web/packages/available_packages_by_name.html")
browseURL("http://crantastic.org/")
browseURL("http://crantastic.org/")
library() # Brings up editor list of installed packages
search() # Shows packages that are currently loaded
library() # Brings up editor list of installed packages
?install.packages
library("ggplot2") # Make package available; often used for loading in scripts
require("ggplot2") # Preferred for loading in functions; maybe better?
? vignette
detach("package:ggplot2", unload = TRUE)
remove.packages("psytabs") # Deletes it
install.packages("psytabs") # Adds psytabs
str(titanictrain)
nrow(titanictrain)
train <- read.csv("train.csv", stringsAsFactors = FALSE)
train <- read.csv("E:\GitHub\Rajendra-R-Solution\R-Solutions\Rajendra-R-Solutions\datafiles\titanictest.csv", stringsAsFactors = FALSE)
train <- read.csv(r"E:\GitHub\Rajendra-R-Solution\R-Solutions\Rajendra-R-Solutions\datafiles\titanictest.csv", stringsAsFactors = FALSE)
train <- read.csv(r"E:\GitHub\Rajendra-R-Solution\R-Solutions\Rajendra-R-Solutions\datafiles\titanictest.csv", stringsAsFactors = FALSE)
train <- read.csv("datafiles\titanictest.csv", stringsAsFactors = FALSE)
train <- read.csv("\datafiles\titanictest.csv", stringsAsFactors = FALSE)
train <- read.csv("datafiles/titanictest.csv", stringsAsFactors = FALSE)
str(train)
table(titanictrain$Survived)
str(titanictrain)
table(titanictrain$Survived)
str(titanictrain)
table(titanictrain$Embarked)
prop.table(titanictrain$Survived)
prop.table(table(titanictrain$Survived))
str(test)
table(test)
?rep
test$Survived <- rep(0, 418)
str(test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "datafiles/theyallperish.csv", row.names = FALSE)
library(anytime)
install.packages("anytime")
install.packages("anytime")
install.packages("anytime")
`titanictrain` <- read.csv(file="C:/Users/user/AppData/Local/Temp/titanictrain.csv.utf8", header=TRUE, row.names=NULL, encoding="UTF-8", sep=",", dec=".", quote="\"", comment.char="")
table(titanictrain$Survived)
prop.table(table(titanictrain$Survived))
str(test)
`titanictest` <- read.csv(file="C:/Users/user/AppData/Local/Temp/titanictest.csv.utf8", header=TRUE, row.names=NULL, encoding="UTF-8", sep=",", dec=".", quote="\"", comment.char="")
str(titanictest)
test$Survived <- rep(0, 418)
titanictest$Survived <- rep(0, 418)
str(titanictest)
summary(titanictrain$Sex)
table(titatinctrain$Sex)
table(titanictrain$Sex)
table(titanictrain$Sex, titanictrain$Survived)
prop.table(table(titanictrain$Sex, titanictrain$Survived))
prop.table(table(titanictrain$Sex, titanictrain$Survived), 1)
titanictest$Survived <- 0 test$Survived[test$Sex == 'female'] <- 1
titanictest$Survived <- 0
titanictest$Survived[titanictest$Sex == 'female'] <- 1
submit <- data.frame(PassengerId = titanictest$PassengerId, Survived = titanictest$Survived)
write.csv(submit, file = "datafiles/theyallperish.csv", row.names = FALSE)
summary(titanictrain$Age)
min(titanictrain$Age)
summary(titanictrain$Age)
titanictrain$Child <- 0
titanictrain$Child[train$Age < 18] <- 1
titanictrain$Child[titanictrain$Age < 18] <- 1
aggregate(Survived ~ Child + Sex, data = titanictrain, FUN = sum)
aggregate(Survived ~ Child + Sex + SibSp, data = titanictrain, FUN = sum)
aggregate(Survived ~ Child + Sex + Sibsp, data = titanictrain, FUN = sum)
aggregate(Survived ~ Child + Sex , data = titanictrain, FUN = sum)
aggregate(Survived ~ Child + Sex, data = titanictrain, FUN = length)
aggregate(Survived ~ Child + Sex, data = titanictrain, FUN = function(x) { sum(x) / length(x) })
titanictrain$Fare2 <- '30+'
titanictrain$Fare2[titanictrain$Fare < 30 & titanictrain$Fare >= 20] <- '20-30'
titanictrain$Fare2[titanictrain$Fare < 20 & titanictrain$Fare >= 10] <- '10-20'
titanictrain$Fare2[titanictrain$Fare < 10] <- '<10'
aggregate(Survived ~ Fare2 + Pclass + Sex, data = titanictrain, FUN = function(x) { sum(x) / length(x) })
titanictest$Survived <- 0
titanictest$Survived[titanictest$Sex == 'female'] <- 1
titanictest$Survived[titanictest$Sex == 'female' & titanictest$Pclass == 3 & titanictest$Fare >= 20] <- 0
aggregate(Survived ~ Fare2 + Pclass + Sex, data = titanictrain, FUN = function(x) { sum(x) / length(x) })
titanictest$Survived[titanictest$Sex == 'female' & titanictest$Pclass == 3 & titanictest$Fare >= 20] <- 0
library(rpart)
?rpart
library(rpart)
    method = "class", data = kyphosis)
library("rpart.plot")
data("iris")
tree <- rpart(Species ~ ., data = iris, method = "class")
rpart.plot(tree)
install.packages("rpart.plot")
tree <- rpart(Species ~ ., data = iris, method = "class")
rpart.plot(tree)
library("rpart.plot")
rpart.plot(tree)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,                data = titanictrain,                method = "class")
class(fit)
plot(fit)
text(fit)
library(rattle)
install.packages('rattle')
library(rattle)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
Prediction <- predict(fit, titanictest, type = "class")
Prediction 
table(Prediction)
Prediction <- predict(fit, titanictest, type = "class")
submit <- data.frame(PassengerId = titanictest$PassengerId, Survived = Prediction)
write.csv(submit, file = "datafiles/myfirstdtree.csv", row.names = FALSE)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,                data = train,                method = "class",                control = rpart.control(minsplit = 2, cp = 0))
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,                data = titanictrain,                method = "class",                control = rpart.control(minsplit = 2, cp = 0))
`titanictrain` <- read.csv(file="C:/Users/user/AppData/Local/Temp/titanictrain.csv.utf8", header=TRUE, row.names=NULL, encoding="UTF-8", sep=",", dec=".", quote="\"", comment.char="")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,                data = titanictrain,                method = "class",                control = rpart.control(minsplit = 2, cp = 0))
fancyRpartPlot(fit)
library(rattle) library(rpart.plot) library(RColorBrewer)
fancyRpartPlot(fit)
? datasets
? datasets
library(help = "datasets")
? library
library(datasets)
? require
data()
browseURL("http://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html")
data()
? airmiles
data(airmiles) # Listed as "ts" for "time-series"
airmiles
str(airmiles)
? anscombe
str(anscombe)
anscombe
rm(list = ls()) # Clean up
x1 <- 0:10 # Assigns number 0 through 10 to x1
x1 # Prints contents of x1 in console
x2 <- 10:0 # Assigns number 10 through 0 to x2
x2
x3 <- seq(10) # Counts from 1 to 10
x3
? seq
x4 <- seq(30, 0, by = -3) # Counts down by 3
x4
x5 <- c(5, 4, 1, 6, 7, 2, 2, 3, 2, 8) # Concatenate
x5
? c
x6 <- scan() # After running this command, go to console
ls() # List objects (same as Workspace viewer)
rm(list = ls()) # Clean up
browseURL("http://cran.r-project.org/doc/manuals/R-data.html#Reading-Excel-spreadsheets")
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
apply(m, 1, mean)
m
m #mean of rows apply(m, 1, mean)
tst <- apply(m, 1, mean)
apply(m,2,mean)
plot(apply(m, 2, mean))
apply(m,1:2,function(x) x/2)
?by
attach(iris)
data(iris)
attach(iris)
head(iris)
by(iris[, 1:4], Species, colMeans)
data <- data.frame( Stat11 = rnorm(100, mean = 3, sd = 2), Stat21 = rnorm(100, mean = 4, sd = 1), Stat31 = rnorm(100, mean = 6, sd = 0.5), Stat41 = rnorm(100, mean = 10, sd = 0.5), Stat12 = rnorm(100, mean = 4, sd = 2), Stat22 = rnorm(100, mean = 4.5, sd = 2), Stat32 = rnorm(100, mean = 7, sd = 0.5), Stat42 = rnorm(100, mean = 8, sd = 3), Stat13 = rnorm(100, mean = 6, sd = 0.5), Stat23 = rnorm(100, mean = 5, sd = 3), Stat33 = rnorm(100, mean = 8, sd = 0.2), Stat43 = rnorm(100, mean = 4, sd = 4) )
data
boxplot(data)
boxplot(data)
data <- data.frame( Stat11 = rnorm(100, mean = 3, sd = 2), Stat21 = rnorm(100, mean = 4, sd = 1), Stat31 = rnorm(100, mean = 6, sd = 0.5), Stat41 = rnorm(100, mean = 10, sd = 0.5), Stat12 = rnorm(100, mean = 4, sd = 2), Stat22 = rnorm(100, mean = 4.5, sd = 2), Stat32 = rnorm(100, mean = 7, sd = 0.5), Stat42 = rnorm(100, mean = 8, sd = 3), Stat13 = rnorm(100, mean = 6, sd = 0.5), Stat23 = rnorm(100, mean = 5, sd = 3), Stat33 = rnorm(100, mean = 8, sd = 0.2), Stat43 = rnorm(100, mean = 4, sd = 4) ) data boxplot(data)
lord.rda
N <- 1000
b <- 10
l <- 50
u <- 70
Mujer1 <- runif(N, l, u)
?runif
runif(n, min = 0, max = 1)
n <- 2
runif(n, min = 0, max = 1)
Hombre1 <- Mujer1 + b
Hombre1 
beta1 <- 0.4
beta1 <- 0.4 Mujerb0 <- (1 - beta1) * mean(Mujer1) Hombreb0 <- mean(Hombre1) - beta1 * (mean(Mujer1) + b) sds <- 1 Mujer2 <- Mujerb0 + beta1 * Mujer1 + rnorm(N, sd = sds) Hombre2 <- Hombreb0 + beta1 * Hombre1 + rnorm(N, sd = sds) datos <- data.frame(inicio = c(Mujer1, Hombre1), final = c(Mujer2, Hombre2)) datos$dif <- datos$final - datos$inicio datos$sexo = c(rep(0, N), rep(1, N))
library(ggplot2)
datos
head(datos)
ggplot(data = datos, aes(inicio, final, color = factor(sexo))) +   geom_point() + stat_smooth(method = "lm") +   geom_abline(intercept = 0, slope = 1) +   ggtitle("Paradoja de Lord") + theme_bw()
for (year in c(2000:2010)) { print(paste("hi")) }
for (year in c(2000:2010)) { print(paste("hi",year)) }
for (year in c(2000:2010)) { print(paste("Year is ",year)) }
for (i in 1:10) {     if (!i %% 2) {         next     }     print(i) }
    m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
    m
    apply(m, 1, mean)
?lapply
require(stats);
require(graphics)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE, FALSE, FALSE, TRUE))
x
lapply(x, mean)
median(md,na.rm=TRUE)
md <- c(1, 3, 5, 7, 9)
median(md,na.rm=TRUE)
md <- c(1, 3, 5, 7)
median(md,na.rm=TRUE)
md <- c(1, 3, 5, 7,9,NA)
md
median(md,na.rm=TRUE)
median(md,na.rm=FALSE)
