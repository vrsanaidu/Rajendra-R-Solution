x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
pie(x,labels)
library(plotrix)
# Create data for the graph.
x <-  c(21, 62, 10,53)
lbl <-  c("London","New York","Singapore","Mumbai")
# Give the chart file a name.
png(file = "datafiles/3d_pie_chart.jpg")
pie3D(x,labels = lbl,explode = 0.01, main = "Pie Chart of Countries ")
print("hello world")
print(1:20)
mean(1:10)
mean(xmean)
xmean <- 1:100
mean(xmean)
help(mean) #search exact term 
example(mean) 
?mean 
help.search("rnorm") 
help.search("mean") 
??rnorm 
demo() 
demo(package = .packages(all.available = TRUE)) 
demo(package = 'graphics') 
demo(graphics) 
vignette() #List all vignettes in attached packages
scr <- 300 #Using assignment operator
scr <- 300 
scr 
factorexample <- c(1,2,3,4,5,6)
factorexample
str(factorexample)
factorexample <- c(1,2,3,4,5,6,"Rajendra")
str(factorexample)
10 + 5  #Addition
10 - 5  #Subtraction
10 * 5  #Multiplication
10 / 5  #Division
10 ^ 5  #Exponentiation
2 ^ 5  #Exponentiation
format(10 ^ 5, scientific=FALSE) #Without scientific notation
10 ** 5 #Exponentiation
10 %% 3  #Modulus 
10 %/% 3  #Integer division
10/3
str(10/3)
str(10 %/% 3) #Integer division
abs(-5)  #Absolute 
log(2) #Natural logarithm
log
log(2,base = 10 ) #Logarithm
exp(5) #Exponential
factorial(5) #factorial
pi #PI
options() #Get global options
NA + 5 #Operation on NA
NA + 5 #Operation on NA
is.na(NA) #Check if NA
is.na(NaN) #Check if NaN is NA
is.nan(NA) #Check if NA is NaN
5 > 2  
5 >= 2 
5 < 2  
5 <=2  
5 == 2 
5 != 2 
5 == 2 
5 != 2 
"b" > "a" 
!(TRUE) 
TRUE | FALSE 
TRUE & FALSE 
marks <- c(10, 20, 30, 40)
marks 
marks[0]
marks[[0]]
marks 
marks 
marks[1] 
mean(marks)
marks <- marks + 5 
marks
marks >= 30 
pmarks <- c(20,40,30,50) cmarks <- c(30,20,50,20) totmarks <- pmarks + cmarks 
totmarks 
snames <- c("Raj","Rahul","Priya","Poonam")
snames 
str(snames) 
is.character(snames) 
student.weights <- c( 60.5, 72.5 , 45.2,  47.5) 
str(student.weights) 
s.weights <- c( 60.5, 72.5 , 45.2,  47.5) 
str(s.weights) 
is.numeric(s.weights) 
spmarks <- c( 70L , 75L , 80L,  85L) 
str(spmarks) 
is.integer(spmarks) 
is.numeric(spmarks)  is.integer(s.weights) 
spinterest <- c(FALSE,F,TRUE ,T)  str(spinterest)  is.logical(spinterest) 
10+2i
complex.vector <- c(10+2i, -1+10i, 4+3i, 7+8i) 
complex.vector 
str(complex.vector) 
is.complex(complex.vector) 
vector("character", length = 4)  vector("numeric", length = 4)   vector("integer", length = 4)   vector("logical", length = 4)   vector("complex", length = 4)  
sp.marks <- c( 70L , 75L , 80L,  85L)
str(sp.marks)
scmarks <- c(60L, 70L, 85L, 70L)
sp.marks + scmarks #arithmetic operation
sp.marks >= 75 #logical operation
snames <- c("Raj","Rahul","Priya","Poonam")
snames[1] #1 based index, use [] to access elements
snames[2] #Extract second element
snames[1:3] #Extract multiple elements
snames[c(T,F,T,F)] #Extract multiple elements by specifying a logical vector
snames[sp.marks >= 75]
sweights <- c( 60.5, 72.5 , 45.2,  "47.5")
str(sweights)
as.numeric(sp.marks >= 75)
as.character(sp.marks) 
sweights <- c( 60.5, 72.5 , 45.2,  47.5) 
as.integer(sweights)
as.numeric(snames) 
as.numeric(snames) 
genders <- c("Male","Male","Female","Female") # Character vector
genders
genders <- c(2L,2L,1L,1L) # Integer vector
genders
genders <- factor(c("Male","Male","Female","Female")) # factor
genders
as.numeric(genders) #Explicit conversion
genders
genders <- c(4L,2L,1L,1L) # Integer vector
genders
genders <- factor(c("Male","Male","Female","Female")) # factor
genders
as.numeric(genders) #Explicit conversion
str(bloodgroups)
bloodgroups <- factor(c("A","AB","O","AB"), levels = c("A","B","AB","O")) 
str(bloodgroups)
names <- c("Raj","Rahul","Priya","Poonam")
weights <- c( 60.5, 72.5 , 45.2,  47.5)
genders <- factor(c("Male","Male","Female","Female"))
pmarks <- c( 70L , 75L , 80L,  85L)
cmarks <- c(60L, 70L, 85L, 70L)
student1 <- list(names[1], weights[1], genders[1],                   pmarks[1], cmarks[1])
str(student1)
student1
list(names, weights[1], genders[1],                  pmarks[1], cmarks[1])
list(names, weights[1], genders[1],                  pmarks[1], cmarks[1])
snames <- c("Raj","Rahul","Priya","Poonam") sweights <- c( 60.5, 72.5 , 45.2,  47.5) sgenders <- factor(c("Male","Male","Female","Female")) spmarks <- c( 70L , 75L , 80L,  85L) sc.marks <- c(60L, 70L, 85L, 70L)
student1 <- list(snames[1], sweights[1], sgenders[1],                  spmarks[1], sc.marks[1])
student1[1] #Single brackets [] return element of same type
typeof(student1[1]) 
student1[[1]] #double brackets [[]] return the object in its own type
typeof(student1[[1]]) 
student1[1:3] #Access multiple elements using index
#Subsetting: Extract element(s) using named list student1 <- list(name = snames[1],                   weight = sweights[1],                   gender = sgenders[1],                   physics = spmarks[1],                  chemistry = sc.marks[1]) student1[["name"]] student1$gender #Access element using element name or label student1[c("physics","chemistry")] #Access multiple elements using label names #Use length() to get number of elements length(student1)
snames <- c("Raj","Rahul","Priya","Poonam") sweights <- c( 60.5, 72.5 , 45.2,  47.5) sgenders <- factor(c("Male","Male","Female","Female")) spmarks <- c( 70L , 75L , 80L,  85L) scmarks <- c(60L, 70L, 85L, 70L)
students <- data.frame(snames,sweights,sgenders,                        spmarks, scmarks)
typeof(students)
str(students)
students
students
students <- data.frame(snames,sweights,sgenders,                        spmarks, scmarks,                         stringsAsFactors = FALSE)
str(students)
gnames <- data.frame("Rajendra")
gnames
gnames <- data.frame("Rajendra","Simhadri","Naidu")
gnames
str(gnames)
gnames <- data.frame("Rajendra","Simhadri","Naidu",stringsAsFactors = FALSE)
str(gnames)
typeof(students[1])  
student.names <- c("Raj","Rahul","Priya","Poonam") student.weights <- c( 60.5, 72.5 , 45.2,  47.5) student.genders <- factor(c("Male","Male","Female","Female")) student.physics.marks <- c( 70L , 75L , 80L,  85L) student.chemistry.marks <- c(60L, 70L, 85L, 70L) students <- data.frame(student.names,student.weights,student.genders,         student.physics.marks, student.chemistry.marks, stringsAsFactors = FALSE)
typeof(students[1])  
spmarks <- c( 70L , 75L , 80L,  85L)
scmarks <- c(60L, 70L, 85L, 70L)
smarks <-rbind(spmarks , scmarks)
smarks
smarks <-cbind(spmarks , scmarks)
smarks
rownames(smarks) <- c("Raj","Rahul","Priya","Poonam")
smarks
str(smarks)
smarks <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=2,nrow=4) smarks
smarks <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=4,nrow=2                         ,byrow=TRUE) smarks
smarks <- matrix(c(70L, 75L, 80L, 85L, 60L, 70L, 85L, 70L), ncol = 4, nrow = 2, byrow = FALSE) smarks
c1.spmarks <- c( 70L , 75L , 80L,  85L) c1.scmarks <- c(60L, 70L, 85L, 70L)
c1.spmarks <- c( 70L , 75L , 80L,  85L) c1.scmarks <- c(60L, 70L, 85L, 70L) c1.smarks <-cbind(c1.spmarks , c1.scmarks) c1.smarks
class2.spmarks <- c( 71L , 76L , 81L,  86L) class2.scmarks <- c(61L, 71L, 86L, 71L) class2.smarks <-cbind(class2.spmarks                               , class2.scmarks)
rclass2.smarks <-rbind(class2.spmarks                               , class2.scmarks)
rclass2.smarks
smarks <- array(c(c1.smarks,class2.smarks), dim=c(4,2,2))
smarks
c1.spmarks <- c( 70L , 75L , 80L,  85L) c1.scmarks <- c(60L, 70L, 85L, 70L) c1.smarks <-cbind(c1.spmarks , c1.scmarks) c1.smarks
c2.spmarks <- c( 71L , 76L , 81L,  86L) c2.scmarks <- c(61L, 71L, 86L, 71L) c2.smarks <-cbind(c2.spmarks                               , c2.scmarks)
c2.spmarks <- c( 71L , 76L , 81L,  86L) c2.scmarks <- c(61L, 71L, 86L, 71L) c2.smarks <-cbind(c2.spmarks                               , c2.scmarks)
rc2.smarks <-rbind(c2.spmarks                               , c2.scmarks)
c2.smarks rc2.smarks
c1.smarks c2.smarks
smarks <- array(c(c1.smarks,c2.smarks), dim=c(4,2,2)) smarks
my.array <- array(1:24, dim = c(3, 4, 2)) my.array
GetTotalMarks <- function(quiz.marks, viva.marks) {   total.marks <- quiz.marks + viva.marks   #total.marks } spq.marks <- c(70L, 75L, 80L, 85L) spv.marks <- c(7L, 5L, 8L, 6L) spt.marks <- GetTotalMarks(spq.marks,                                              spv.marks) spt.marks scq.marks <- c(60L, 70L, 85L, 70L) scv.marks <- c(8L, 4L, 7L, 9L) sct.marks <- GetTotalMarks(scq.marks,                                                scv.marks) sct.marks returnMyfullname <- function(name) {   cat(name,"Simhadri Appala Naidu", "Vechalapu")   length(name) } str(returnMyfullname) returnMyfullname('Rajendra')
